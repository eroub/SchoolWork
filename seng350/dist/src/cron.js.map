{"version":3,"file":"cron.js","sourceRoot":"","sources":["../../src/cron.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\r\nimport DbClient = require(\"./DbClient\");\r\nimport { ProductModel } from \"./models/productModel\";\r\n\r\nconst chai = require(\"chai\");\r\nconst request = require(\"request\");\r\n\r\nconst cron = require(\"node-cron\");\r\nconst fs = require(\"fs\");\r\n\r\nconst datab = DbClient.connect();\r\nlet updateSuccess = false;\r\nlet integrityNew;\r\nlet integrityOld;\r\n\r\nfunction delay(ms: number) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\n/*************\r\n * CRON JOBS *\r\n *************/\r\n/**\r\n * The purpose of this cron job is to update the database every minute (in an attempt to mock data)\r\n * If the mock is successful, the job appends a success log to the end of a local log file\r\n */\r\nfunction update() {\r\n    const shoeUpdate = new ProductModel();\r\n    cron.schedule(\"* * * * *\", (err: any) => {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n        const date = new Date();\r\n        const update = datab.then((db) => {\r\n            db!.collection(\"shoes\").updateMany({}, { $inc: { current_price: 1 } });\r\n            return true;\r\n        })\r\n            .catch((err) => {\r\n                console.log(\"Failed to update shoes\");\r\n                return false;\r\n            });\r\n\r\n        if (update) {\r\n            fs.appendFile(\"./logs/update.log\",\r\n                date.toLocaleString() + \" --- Updated all shoes by $2 successfully\\n\", (err: any) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n                });\r\n            updateSuccess = true;\r\n        } else {\r\n            fs.appendFile(\"./logs/update.log\",\r\n                date.toLocaleString() + \" --- FATAL ERROR: FAILED TO UPDATE SHOES ***********\\n\", (err: any) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n                });\r\n            updateSuccess = false;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * *** INTEGRITY QUALITY ATTRIBUTE AUTOMATIC TEST ***\r\n *\r\n * The purpose of this cron job is to automatically test our integrity quality attribute (issue #14)\r\n * The cron job open it's own connection to the database and grab the list of shoes. It will then\r\n * compare this list of shoes to the shoe list post update to verify an price change has occured.\r\n * From there it will use one of the apps routes that will run a similar query, and compare the results.\r\n * If there are any discrepencies the cron job will log it. This is done at the beginning of every hour.\r\n */\r\nfunction integrity() {\r\n    cron.schedule(\"0 * * * *\", async (err: any) => {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n        const date = new Date();\r\n\r\n        // Grab integral data to be compared\r\n        integrityOld = await datab.then((db) => {\r\n            return db!.collection(\"shoes\").find().toArray();\r\n        })\r\n            .catch((err) => {\r\n                console.log(\"Failed to grab shoe array\");\r\n                return false;\r\n            });\r\n\r\n        // Wait just over one minute. Enough time to data to update\r\n        await delay(63000);\r\n\r\n        // If the last update was successful continue, otherwise no need\r\n        if (updateSuccess) {\r\n            // Grab new data to be compared\r\n            integrityNew = await datab.then((db) => {\r\n                return db!.collection(\"shoes\").find().toArray();\r\n            })\r\n                .catch((err) => {\r\n                    console.log(\"Failed to grab shoe array\");\r\n                    return false;\r\n                });\r\n        } else {\r\n            fs.appendFile(\"./logs/integrity.log\",\r\n                date.toLocaleString() + \" --- FATAL ERROR: LAST UPDATE FAILED\\n\", (err: any) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n                });\r\n            return;\r\n        }\r\n\r\n        // Verify that the update occured\r\n        try {\r\n            chai.expect(integrityNew).to.not.deep.equal(integrityOld);\r\n        } catch {\r\n            fs.appendFile(\"./logs/integrity.log\",\r\n                date.toLocaleString() +\r\n                \" --- FATAL ERROR: OLD DATA == NEW DATA. SOMETHING WEIRD HAPPENED\\n\", (err: any) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n                });\r\n        }\r\n\r\n        const shoes = new ProductModel();\r\n        const allShoes = await shoes.getAllDB();\r\n\r\n        // Verify that the shoe list is the same\r\n        try {\r\n            chai.expect(allShoes).to.deep.equal(integrityNew);\r\n        } catch {\r\n            fs.appendFile(\"./logs/integrity.log\",\r\n                date.toLocaleString() + \" --- FATAL ERROR: NEW DATA NOT REFLECTED ON APP\\n\", (err: any) => {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n                });\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * *** AVAILABILITY QUALITY ATTRIBUTE AUTOMATIC TEST ***\r\n *\r\n * The purpose of this cron job is to send a request to the live application every 15 minutes.\r\n * This is to check if the app is live (i.e. available). If the app is live, make a log of it\r\n * otherwise, log an error and shuts down the node process (process exit code 1).\r\n */\r\nfunction availability() {\r\n    cron.schedule(\"0,15,30,45 * * * *\", () => {\r\n        const date = new Date();\r\n        request(\"https://seng350.roubekas.com\", async (error: any, response: any, body: any) => {\r\n            if (response.statusCode === 200) {\r\n                fs.appendFile(\"./logs/availability.log\",\r\n                    date.toLocaleString() + \" --- Heartbeat confirmed, server is alive and well\\n\", (err: any) => {\r\n                        if (err) {\r\n                            throw err;\r\n                        }\r\n                    });\r\n            } else {\r\n                fs.appendFile(\"./logs/availability.log\",\r\n                    date.toLocaleString() + \" --- FATAL ERROR: Heartbeat dead, shutting down\\n\", (err: any) => {\r\n                        if (err) {\r\n                            throw err;\r\n                        }\r\n                    });\r\n                await delay(10000);\r\n                return process.exit(1);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * The purpose of this cron job is to renew the log files at the end of every Sunday and Thursday\r\n * This is done with the goal of not having 20gb log files that crash the server\r\n */\r\nfunction renew() {\r\n    cron.schedule(\"59 23 * * 3,7\", () => {\r\n        fs.unlink(\"./logs/update.log\", (err: any) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n        fs.link(\"./logs/update.log\", (err: any) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n        fs.unlink(\"./logs/integrity.log\", (err: any) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n        fs.link(\"./logs/integrity.log\", (err: any) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n        fs.unlink(\"./logs/availability.log\", (err: any) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n        fs.link(\"./logs/availability.log\", (err: any) => {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n        });\r\n        console.log(\"All log files successfully re-created!\");\r\n    });\r\n}\r\n\r\nupdate();\r\nintegrity();\r\navailability();\r\nrenew();\r\n"]}